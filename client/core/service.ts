/**
 * Generated by orval v6.6.0 üç∫
 * Do not edit manually.
 * Vetting Engine Backend
 * API of all Vetting Engine services
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from 'react-query'
import { customInstance, ErrorType } from './axios/index'
export type GetApiUsers500 = {
  success?: boolean;
  error_code?: string;
  message?: string;
};

export type GetUsersListResponseDataUsersItem = {
  id: number;
  name: string;
};

export type GetUsersListResponseData = {
  users?: GetUsersListResponseDataUsersItem[];
};

export interface GetUsersListResponse {
  data?: GetUsersListResponseData;
  success?: boolean;
}



// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<
T extends (...args: any) => Promise<any>
> = T extends (...args: any) => Promise<infer R> ? R : any;


/**
 * Get all users
 */
export const getApiUsers = (
    
 ) => {
      return customInstance<GetUsersListResponse>(
      {url: `/api/users`, method: 'get'
    },
      );
    }
  

export const getGetApiUsersQueryKey = () => [`/api/users`];

    
export const useGetApiUsers = <TData = AsyncReturnType<typeof getApiUsers>, TError = ErrorType<GetApiUsers500>>(
  options?: { query?:UseQueryOptions<AsyncReturnType<typeof getApiUsers>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options || {}

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersQueryKey();

  

  const queryFn: QueryFunction<AsyncReturnType<typeof getApiUsers>> = () => getApiUsers();

  const query = useQuery<AsyncReturnType<typeof getApiUsers>, TError, TData>(queryKey, queryFn, queryOptions)

  return {
    queryKey,
    ...query
  }
}


